openapi: 3.1.0
info:
  title: FastAPI
  version: 0.1.0
servers:
- url: /rest/unstructured
paths:
  /data_connector/create:
    post:
      tags:
      - Data Connectors
      summary: Create
      description: "Create a new vector database (VDB) connector.\n\n## Request Body\n\
        \n| Field             | Type          | Description                      \
        \                |\n|-------------------|---------------|--------------------------------------------------|\n\
        | `connector_name`  | `str`         | The profile name of the data connector\
        \ to create.|\n| `connector_body`  | `VDBConfigs`  | Configuration object\
        \ for the VDB connector.      |\n\n## Response\n\n- **200**: VDB connector\
        \ created successfully  \n    - Returns: `{ \"profile_id\": str }`\n- **500**:\
        \ Internal Server Error (e.g., failed to store secret)\n\n## Example\n\n```json\n\
        {\n  \"connector_name\": \"my-pinecone-db\",\n  \"connector_body\": {\n  \
        \  \"vector_db_type\": \"pinecone\",\n    \"api_key\": \"your-api-key\",\n\
        \    \"environment\": \"us-east-1-aws\",\n    \"index_name\": \"my-index\"\
        \n  }\n}\n```"
      operationId: create_data_source_route_data_connector_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVDBConnectorRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nconnector_response\
          \ = client.data_source.create(\n    connector_body={\n        \"collection_name\"\
          : \"collection_name\",\n        \"database_name\": \"database_name\",\n\
          \        \"db_user\": \"db_user\",\n        \"name\": \"name\",\n      \
          \  \"password\": \"password\",\n        \"port\": \"port\",\n        \"\
          url\": \"url\",\n    },\n    connector_name=\"connector_name\",\n)\nprint(connector_response.profile_id)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst connectorResponse = await client.dataSource.create({\n\
          \  connector_body: {\n    collection_name: 'collection_name',\n    database_name:\
          \ 'database_name',\n    db_user: 'db_user',\n    name: 'name',\n    password:\
          \ 'password',\n    port: 'port',\n    url: 'url',\n  },\n  connector_name:\
          \ 'connector_name',\n});\n\nconsole.log(connectorResponse.profile_id);"
  /data_connector/update:
    post:
      tags:
      - Data Connectors
      summary: Update
      description: "Update an existing data connector configuration.\n\n## Request\
        \ Body\n\n| Field             | Type          | Description              \
        \                        |\n|-------------------|---------------|--------------------------------------------------|\n\
        | `connector_name`  | `str`         | The profile name of the data connector\
        \ to update.|\n| `connector_body`  | `VDBConfigs`  | Updated configuration\
        \ object for the VDB.        |\n\n## Response\n\n- **200**: VDB connector\
        \ updated successfully  \n    - Returns: `{ \"profile_id\": str }`\n- **500**:\
        \ Internal Server Error (e.g., failed to store secret)\n\n## Example\n\n```json\n\
        {\n  \"connector_name\": \"my-pinecone-db\",\n  \"connector_body\": {\n  \
        \  \"vector_db_type\": \"pinecone\",\n    \"api_key\": \"updated-api-key\"\
        ,\n    \"environment\": \"us-west-1-aws\",\n    \"index_name\": \"my-index\"\
        \n  }\n}\n```"
      operationId: update_data_source_route_data_connector_update_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVDBConnectorRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nconnector_response\
          \ = client.data_source.update(\n    connector_body={\n        \"collection_name\"\
          : \"collection_name\",\n        \"database_name\": \"database_name\",\n\
          \        \"db_user\": \"db_user\",\n        \"name\": \"name\",\n      \
          \  \"password\": \"password\",\n        \"port\": \"port\",\n        \"\
          url\": \"url\",\n    },\n    connector_name=\"connector_name\",\n)\nprint(connector_response.profile_id)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst connectorResponse = await client.dataSource.update({\n\
          \  connector_body: {\n    collection_name: 'collection_name',\n    database_name:\
          \ 'database_name',\n    db_user: 'db_user',\n    name: 'name',\n    password:\
          \ 'password',\n    port: 'port',\n    url: 'url',\n  },\n  connector_name:\
          \ 'connector_name',\n});\n\nconsole.log(connectorResponse.profile_id);"
  /data_connector/list:
    post:
      tags:
      - Data Connectors
      summary: List
      description: "List all vector database (VDB) connectors for the authenticated\
        \ user.\n\n## Response\n\n- **200**: Successfully retrieved list of VDB connectors\
        \  \n    - Returns: `{ \"connectors\": VDBConfigDict }`\n\n## Example Response\n\
        \n```json\n{\n  \"connectors\": {\n    \"my-pinecone-db\": {\n      \"vector_db_type\"\
        : \"pinecone\",\n      \"environment\": \"us-east-1-aws\",\n      \"index_name\"\
        : \"my-index\"\n    },\n    \"my-qdrant-db\": {\n      \"vector_db_type\"\
        : \"qdrant\",\n      \"url\": \"https://qdrant.example.com\"\n    }\n  }\n\
        }\n```"
      operationId: list_data_sources_route_data_connector_list_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVDBConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nlist_vdb_connector\
          \ = client.data_source.list()\nprint(list_vdb_connector.connectors)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst listVdbConnector = await client.dataSource.list();\n\
          \nconsole.log(listVdbConnector.connectors);"
  /data_connector/delete:
    post:
      tags:
      - Data Connectors
      summary: Delete
      description: "Delete a data connector and all associated data.\n\nThis operation\
        \ will:\n- Delete all vector data stored in the VDB\n- Remove the connector\
        \ configuration\n- Clean up connection sharing metadata if enabled\n\n## Request\
        \ Body\n\n| Field             | Type   | Description                     \
        \                 |\n|-------------------|--------|--------------------------------------------------|\n\
        | `connector_name`  | `str`  | The profile name of the data connector to delete.|\n\
        \n## Response\n\n- **200**: VDB connector deleted successfully  \n    - Returns:\
        \ `{ \"profile_id\": str }`\n- **404**: Connector not found\n- **500**: Internal\
        \ Server Error (e.g., failed to store secret)\n\n## Example\n\n```json\n{\n\
        \  \"connector_name\": \"my-pinecone-db\"\n}\n```"
      operationId: delete_data_source_route_data_connector_delete_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteConnectorRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nconnector_response\
          \ = client.data_source.delete(\n    connector_name=\"connector_name\",\n\
          )\nprint(connector_response.profile_id)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst connectorResponse = await client.dataSource.delete({\
          \ connector_name: 'connector_name' });\n\nconsole.log(connectorResponse.profile_id);"
  /ocr/ingest:
    post:
      tags:
      - Data Connectors
      summary: Ingest
      description: "Process documents with OCR and ingest them into Unstructured.\n\
        \nThis endpoint performs optical character recognition on documents and stores\
        \ the extracted data.\n\n## Request Body\n\n| Field                   | Type\
        \           | Description                                                |\n\
        |-------------------------|----------------|------------------------------------------------------------|\n\
        | `data_connector_name`   | `str`          | Name of the data connector to\
        \ use.                         |\n| `file_names`            | `List[str]`\
        \    | Specific files to process. If omitted, processes all.      |\n| `job_id`\
        \                | `str`          | Custom job ID for tracking. Auto-generated\
        \ if not provided.|\n| `clean_up_out_of_sync`  | `bool`         | Remove files\
        \ from VDB not in source. Default: `true`.      |\n| `file_count_to_run` \
        \    | `int`          | Limit number of files to process.                \
        \          |\n| `use_llm`               | `bool`         | Use LLM for enhanced\
        \ extraction. Default: `false`.         |\n\n## Response\n\n- **200**: OCR\
        \ job started successfully  \n    - Returns: Job tracking information\n- **400**:\
        \ Bad Request (e.g., invalid data connector, unsupported VDB type)\n- **500**:\
        \ Internal Server Error\n\n## Example\n\n```json\n{\n  \"data_connector_name\"\
        : \"my-documents\",\n  \"use_llm\": true,\n  \"clean_up_out_of_sync\": true,\n\
        \  \"file_count_to_run\": 100\n}\n```"
      operationId: ocr_ingest_route_ocr_ingest_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OCRIngestRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.data_source.ingest(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(response)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.dataSource.ingest({ data_connector_name:\
          \ 'data_connector_name' });\n\nconsole.log(response);"
  /data/metadata/list:
    post:
      tags:
      - Data Connectors
      summary: List Ingested Data
      description: "Retrieve metadata from documents ingested into Unstructured.\n\
        \n## Request Body\n\n| Field                      | Type                |\
        \ Description                                           |\n|----------------------------|---------------------|-------------------------------------------------------|\n\
        | `data_connector_name`      | `str`               | Name of the data connector\
        \ to query.                  |\n| `group_by`                 | `str`     \
        \          | Group results by `file` or `node`. Default: `file`.   |\n| `metadata_keys`\
        \            | `List[str]`         | Specific metadata keys to retrieve. \
        \                  |\n| `file_names`               | `List[str]`         |\
        \ Filter by specific file names.                        |\n| `point_ids` \
        \               | `List[str]`         | Filter by specific node/point IDs.\
        \                    |\n| `metadata_key_filters`     | `List[str]`       \
        \  | Filter by presence of metadata keys.                  |\n| `metadata_value_filters`\
        \   | `Dict[str, List]`   | Filter by specific metadata values.          \
        \         |\n| `full_text_filters`        | `List[str]`         | Full-text\
        \ search filters.                             |\n| `limit`               \
        \     | `int`               | Maximum number of results to return.       \
        \           |\n| `with_vectors`             | `bool`              | Include\
        \ vector embeddings. Default: `false`.          |\n\n## Response\n\n- **200**:\
        \ Successfully retrieved metadata  \n    - Returns: `{ \"metadata\": Dict\
        \ }`\n- **500**: Internal Server Error (e.g., error fetching metadata)\n\n\
        ## Example\n\n```json\n{\n  \"data_connector_name\": \"my-documents\",\n \
        \ \"group_by\": \"file\",\n  \"metadata_keys\": [\"title\", \"author\", \"\
        date\"],\n  \"file_names\": [\"document1.pdf\", \"document2.pdf\"],\n  \"\
        limit\": 100\n}\n```"
      operationId: list_ingested_data_route_data_metadata_list_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSourceMetadataRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSourceMetadataResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.data_source.list_ingested_data(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(response.metadata)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.dataSource.listIngestedData({\
          \ data_connector_name: 'data_connector_name' });\n\nconsole.log(response.metadata);"
  /tags/upsert:
    post:
      tags:
      - Tags
      summary: Upsert
      description: "Insert or update a tag definition.\n\n## Request Body\n\n| Field\
        \      | Type            | Description                                   \
        \   |\n|------------|-----------------|--------------------------------------------------|\n\
        | `tag_data` | `DeasyInputTag` | Tag data structure containing tag definition.\
        \    |\n\n## Response\n\n- **200**: Tag upserted successfully  \n    - Returns:\
        \ `{ \"tag_name\": str, \"tag\": DeasyTag, \"available_values_added\": List[str]\
        \ }`\n- **400**: Bad Request (e.g., invalid tag data)\n- **500**: Internal\
        \ Server Error\n\n## Example\n\n```json\n{\n  \"tag_data\": {\n    \"name\"\
        : \"category\",\n    \"description\": \"Document category classification\"\
        ,\n    \"type\": \"select\",\n    \"available_values\": [\"invoice\", \"receipt\"\
        , \"contract\"]\n  }\n}\n```"
      operationId: upsert_tag_route_tags_upsert_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertTagRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertTagResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.tags.upsert(\n    tag_data={\n        \"name\": \"name\",\n \
          \       \"output_type\": \"output_type\",\n    },\n)\nprint(response.available_values_added)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.tags.upsert({ tag_data:\
          \ { name: 'name', output_type: 'output_type' } });\n\nconsole.log(response.available_values_added);"
  /tags/list:
    get:
      tags:
      - Tags
      summary: List
      description: "List all tags for the authenticated user.\n\n## Response\n\n-\
        \ **200**: Tags retrieved successfully  \n    - Returns: `{ \"tags\": List[DeasyTag]\
        \ }`\n- **500**: Internal Server Error\n\n## Example Response\n\n```json\n\
        {\n  \"tags\": [\n    {\n      \"name\": \"category\",\n      \"description\"\
        : \"Document category\",\n      \"type\": \"select\",\n      \"available_values\"\
        : [\"invoice\", \"receipt\"]\n    },\n    {\n      \"name\": \"date\",\n \
        \     \"description\": \"Document date\",\n      \"type\": \"date\"\n    }\n\
        \  ]\n}\n```"
      operationId: list_tags_route_tags_list_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ntags =\
          \ client.tags.list()\nprint(tags.tags)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst tags = await client.tags.list();\n\nconsole.log(tags.tags);"
  /tags/delete:
    delete:
      tags:
      - Tags
      summary: Delete
      description: "Delete a tag by name. Tag must not be in use by any graphs or\
        \ dataslices.\n\n## Query Parameters\n\n| Parameter  | Type  | Description\
        \                          |\n|------------|-------|--------------------------------------|\n\
        | `tag_name` | `str` | Name of the tag to delete.           |\n\n## Response\n\
        \n- **200**: Tag deleted successfully  \n    - Returns: `{ \"tag_name\": str\
        \ }`\n- **500**: Internal Server Error (e.g., tag still in use)\n\n## Example\n\
        \n```\nDELETE /tags/delete?tag_name=category\n```"
      operationId: delete_tag_route_tags_delete_delete
      parameters:
      - name: tag_name
        in: query
        required: true
        schema:
          type: string
          title: Tag Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ntag_response\
          \ = client.tags.delete(\n    tag_name=\"tag_name\",\n)\nprint(tag_response.tag_name)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst tagResponse = await client.tags.delete({ tag_name:\
          \ 'tag_name' });\n\nconsole.log(tagResponse.tag_name);"
  /suggest_regex:
    post:
      tags:
      - Tags
      summary: Suggest Patterns
      description: "Generate a regex pattern based on a natural language description\
        \ using AI.\n\n## Request Body\n\n| Field              | Type           |\
        \ Description                                                            \
        \                  |\n|--------------------|----------------|------------------------------------------------------------------------------------------|\n\
        | `description`      | `str`          | Natural language description of what\
        \ to match (e.g., \"phone numbers in format (XXX) XXX-XXXX\"). |\n| `examples`\
        \         | `List[str]`    | Optional. List of example strings that should\
        \ match the pattern.                         |\n\n## Response\n\n- **200**:\
        \ Regex pattern generated successfully  \n    - Returns: `{ \"regex\": str,\
        \ \"explanation\": str }`\n- **400**: Bad Request (e.g., invalid request data)\n\
        - **500**: Internal Server Error\n\n## Example\n\n```json\n{\n  \"description\"\
        : \"phone numbers in format (XXX) XXX-XXXX\",\n  \"examples\": [\n    \"(123)\
        \ 456-7890\",\n    \"(555) 123-4567\"\n  ]\n}\n```\n\n## Example Response\n\
        \n```json\n{\n  \"regex\": \"\\(\\d{3}\\) \\d{3}-\\d{4}\",\n  \"explanation\"\
        : \"Matches phone numbers in the format (XXX) XXX-XXXX where X is a digit\"\
        \n}\n```"
      operationId: suggest_patterns_route_suggest_regex_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestRegexRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestRegexResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.tags.pattern.suggest_patterns(\n    description=\"description\"\
          ,\n)\nprint(response.regex)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.tags.pattern.suggestPatterns({\
          \ description: 'description' });\n\nconsole.log(response.regex);"
  /taxonomy/upsert:
    post:
      tags:
      - Taxonomies
      summary: Upsert
      description: "Insert or update a taxonomy (schema/hierarchy) in the database.\n\
        \n## Request Body\n\n| Field                  | Type             | Description\
        \                                                          |\n|------------------------|------------------|----------------------------------------------------------------------|\n\
        | `taxonomy_name`        | `str`            | Name of the taxonomy to upsert.\
        \                                      |\n| `new_taxonomy_name`    | `Optional[str]`\
        \  | New name for the taxonomy (when updating).                          \
        \ |\n| `taxonomy_description` | `Optional[str]`  | Description of the taxonomy.\
        \                                         |\n| `taxonomy_data`        | `Optional[Dict]`\
        \ | The taxonomy/hierarchy data structure.                               |\n\
        \n## Response\n\n- **200**: Taxonomy upserted successfully  \n    - Returns:\
        \ `{ \"taxonomy_name\": str }`\n- **500**: Internal Server Error\n\n## Example\n\
        \n```json\n{\n  \"taxonomy_name\": \"document-categories\",\n  \"taxonomy_description\"\
        : \"Main document classification taxonomy\",\n  \"taxonomy_data\": {\n   \
        \ \"invoice\": [\"purchase_invoice\", \"sales_invoice\"],\n    \"receipt\"\
        : [\"expense_receipt\", \"payment_receipt\"]\n  }\n}\n```"
      operationId: upsert_taxonomy_route_taxonomy_upsert_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertTaxonomyRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyOperationResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ntaxonomy_operation_response\
          \ = client.taxonomy.upsert(\n    taxonomy_name=\"taxonomy_name\",\n)\nprint(taxonomy_operation_response.taxonomy_name)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst taxonomyOperationResponse = await client.taxonomy.upsert({\
          \ taxonomy_name: 'taxonomy_name' });\n\nconsole.log(taxonomyOperationResponse.taxonomy_name);"
  /taxonomy/list:
    post:
      tags:
      - Taxonomies
      summary: List
      description: "List all taxonomies (schemas/hierarchies) for the authenticated\
        \ user.\n\n## Request Body\n\n| Field          | Type                  | Description\
        \                                                          |\n|----------------|-----------------------|----------------------------------------------------------------------|\n\
        | `taxonomy_ids` | `Optional[List[str]]` | List of specific taxonomy IDs to\
        \ retrieve. If omitted, returns all taxonomies. |\n\n## Response\n\n- **200**:\
        \ Taxonomies retrieved successfully  \n    - Returns: `{ \"taxonomies\": List[DeasySchema]\
        \ }`\n- **500**: Internal Server Error\n\n## Example\n\n```json\n{\n  \"taxonomy_ids\"\
        : [\"document-categories\", \"sentiment-types\"]\n}\n```"
      operationId: list_taxonomies_route_taxonomy_list_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTaxonomiesRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTaxonomiesResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ntaxonomies\
          \ = client.taxonomy.list()\nprint(taxonomies.taxonomies)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst taxonomies = await client.taxonomy.list();\n\n\
          console.log(taxonomies.taxonomies);"
  /taxonomy/delete:
    delete:
      tags:
      - Taxonomies
      summary: Delete
      description: "Delete a taxonomy (schema/hierarchy) by name.\n\n## Query Parameters\n\
        \n| Parameter       | Type  | Description                             |\n\
        |-----------------|-------|-----------------------------------------|\n| `taxonomy_name`\
        \ | `str` | Name of the taxonomy to delete.         |\n\n## Response\n\n-\
        \ **200**: Taxonomy deleted successfully  \n    - Returns: `{ \"taxonomy_name\"\
        : str }`\n- **500**: Internal Server Error\n\n## Example\n\n```\nDELETE /taxonomy/delete?taxonomy_name=document-categories\n\
        ```"
      operationId: delete_taxonomy_route_taxonomy_delete_delete
      parameters:
      - name: taxonomy_name
        in: query
        required: true
        schema:
          type: string
          title: Taxonomy Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyOperationResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ntaxonomy_operation_response\
          \ = client.taxonomy.delete(\n    taxonomy_name=\"taxonomy_name\",\n)\nprint(taxonomy_operation_response.taxonomy_name)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst taxonomyOperationResponse = await client.taxonomy.delete({\
          \ taxonomy_name: 'taxonomy_name' });\n\nconsole.log(taxonomyOperationResponse.taxonomy_name);"
  /suggest_schema:
    post:
      tags:
      - Taxonomies
      summary: Suggest
      description: "Suggest a tag taxonomy based on file content and existing metadata.\n\
        \n## Request Body\n\n| Field                   | Type                   |\
        \ Description                                                            \
        \      |\n|-------------------------|------------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name`   | `str`                  | Name of the data connector\
        \ (vector database profile) to use.                 |\n| `file_names`    \
        \        | `Optional[List[str]]`  | List of specific files to analyze for\
        \ the hierarchy suggestion.              |\n| `dataslice_id`          | `Optional[str]`\
        \        | ID of a dataslice to pull files from for the suggestion.      \
        \               |\n| `progress_tracking_id`  | `Optional[str]`        | Custom\
        \ tracking ID for monitoring the suggestion progress.                   |\n\
        | `schema_name`           | `Optional[str]`        | Name for the suggested\
        \ schema/taxonomy.                                      |\n| `current_tree`\
        \          | `Optional[Dict]`       | Existing hierarchy tree to build upon.\
        \                                       |\n| `condition`             | `Optional[Condition]`\
        \  | Filtering condition to select specific files for analysis.          \
        \         |\n| `node`                  | `Optional[GraphNode]`  | Node location\
        \ in the existing hierarchy tree to build upon. Default: `{}`    |\n| `user_context`\
        \          | `Optional[str]`        | User-provided context to guide the suggestion\
        \ process.                       |\n| `context_level`         | `Optional[str]`\
        \        | Level at which to analyze content: `file` or `chunk`. Default:\
        \ `\"file\"`      |\n| `max_height`            | `Optional[int]`        |\
        \ Maximum depth of the generated hierarchy tree. Default: `2`            \
        \      |\n| `use_existing_tags`     | `Optional[bool]`       | Whether to\
        \ incorporate existing tags in suggestions. Default: `false`        |\n| `use_extracted_tags`\
        \    | `Optional[bool]`       | Whether to use previously extracted tags.\
        \ Default: `false`                   |\n| `use_mix_llm_and_source`| `Optional[bool]`\
        \       | Whether to mix LLM-generated and source-based tags. Default: `false`\
        \         |\n\n## Response\n\n- **200**: Schema suggestion generated successfully\
        \  \n    - Returns: `{ \"status_code\": int, \"message\": str, \"suggestion\"\
        : Dict, \"suggested_tags\": Optional[Dict], \"node\": Optional[GraphNode],\
        \ \"tag_not_found_rates\": Optional[Dict] }`\n- **500**: Internal Server Error\n\
        \n## Example\n\n```json\n{\n  \"data_connector_name\": \"my-connector\",\n\
        \  \"file_names\": [\"document1.pdf\", \"document2.pdf\"],\n  \"context_level\"\
        : \"file\",\n  \"max_height\": 3,\n  \"use_existing_tags\": true,\n  \"user_context\"\
        : \"Suggest categories for financial documents\"\n}\n```"
      operationId: suggest_schema_route_suggest_schema_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataSuggestionRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataSuggestionResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.taxonomy.suggest(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(response.suggestion)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.taxonomy.suggest({ data_connector_name:\
          \ 'data_connector_name' });\n\nconsole.log(response.suggestion);"
  /classify:
    post:
      tags:
      - Metadata
      summary: Generate
      description: "Classify specified files with the provided tags.\n\n## Request\
        \ Body\n\n| Field                 | Type                  | Description  \
        \                                                                |\n|-----------------------|-----------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name` | `str`                 | Name of the data connector\
        \ (vector database profile) to use for classification. |\n| `file_names` \
        \         | `Optional[List[str]]` | Names of specific files to classify. \
        \                                        |\n| `tag_names`           | `Optional[List[str]]`\
        \ | Names of tags to use for classification (if `tag_datas` not provided).\
        \       |\n| `tag_datas`           | `Optional[Dict]`      | Tag data to use\
        \ for classification.                                          |\n| `overwrite`\
        \           | `bool`                | Whether to overwrite existing tags.\
        \ Default: `false`                         |\n| `job_id`              | `Optional[str]`\
        \       | Custom job ID for tracking the classification task.            \
        \              |\n| `soft_run`            | `bool`                | If `true`,\
        \ classification will not save to Deasy and will return results. Default:\
        \ `false` |\n| `hierarchy_name`      | `Optional[str]`       | Name of the\
        \ hierarchy/graph to use (if `hierarchy_data` not provided).       |\n| `hierarchy_data`\
        \      | `Optional[Dict]`      | Hierarchy/graph data to use for classification.\
        \ Default: `{}`                |\n| `dataslice_id`        | `Optional[str]`\
        \       | ID of the dataslice to use for file filtering.                 \
        \              |\n\n## Response\n\n- **200**: Classification completed or\
        \ job started successfully  \n    - Returns: `{ \"message\": str, \"job_id\"\
        : str, \"results\": Optional[Dict] }`\n- **500**: Internal Server Error\n\n\
        ## Example\n\n```json\n{\n  \"data_connector_name\": \"my-connector\",\n \
        \ \"file_names\": [\"document1.pdf\", \"document2.pdf\"],\n  \"tag_names\"\
        : [\"category\", \"sentiment\"],\n  \"overwrite\": false,\n  \"soft_run\"\
        : false\n}\n```"
      operationId: generate_route_classify_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.metadata.generate.generate(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(response.message)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.metadata.generate.generate({\
          \ data_connector_name: 'data_connector_name' });\n\nconsole.log(response.message);"
  /classify_bulk:
    post:
      tags:
      - Metadata
      summary: Generate Batch
      description: "Classify all files in a data connector in batches with the provided\
        \ tags.\n\n## Request Body\n\n| Field                 | Type             \
        \     | Description                                                      \
        \            |\n|-----------------------|-----------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name` | `str`                 | Name of the data connector\
        \ (vector database profile) to use for classification. |\n| `total_data_sets`\
        \     | `Optional[int]`       | Total number of files to classify.       \
        \                                    |\n| `tag_names`           | `Optional[List[str]]`\
        \ | Names of tags to use for classification (if `tag_datas` not provided).\
        \       |\n| `tag_datas`           | `Optional[Dict]`      | Tag data to use\
        \ for classification.                                          |\n| `overwrite`\
        \           | `bool`                | Whether to overwrite existing tags.\
        \ Default: `false`                         |\n| `job_id`              | `Optional[str]`\
        \       | Custom job ID for tracking the classification task.            \
        \              |\n| `hierarchy_name`      | `Optional[str]`       | Name of\
        \ the hierarchy/graph to use (if `hierarchy_data` not provided).       |\n\
        | `hierarchy_data`      | `Optional[Dict]`      | Hierarchy/graph data to\
        \ use for classification. Default: `{}`                |\n| `dataslice_id`\
        \        | `Optional[str]`       | ID of the dataslice to use for file filtering.\
        \                               |\n| `conditions`          | `Optional[Condition]`\
        \ | Conditions to use for file filtering.                                \
        \        |\n\n## Response\n\n- **200**: Classification job started successfully\
        \  \n    - Returns: `{ \"message\": str, \"job_id\": str }`\n- **500**: Internal\
        \ Server Error\n\n## Example\n\n```json\n{\n  \"data_connector_name\": \"\
        my-connector\",\n  \"tag_names\": [\"category\", \"sentiment\"],\n  \"overwrite\"\
        : false,\n  \"dataslice_id\": \"abc123\"\n}\n```"
      operationId: generate_batch_route_classify_bulk_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyBulkRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyBulkResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.metadata.generate.generate_batch(\n    data_connector_name=\"\
          data_connector_name\",\n)\nprint(response.message)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.metadata.generate.generateBatch({\
          \ data_connector_name: 'data_connector_name' });\n\nconsole.log(response.message);"
  /metadata/upsert:
    post:
      tags:
      - Metadata
      summary: Upsert
      description: "Insert or update metadata for files and tags.\n\n## Request Body\n\
        \n| Field                 | Type                  | Description          \
        \                                                        |\n|-----------------------|-----------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name` | `Optional[str]`       | Name of the data connector\
        \ (vector database profile).                        |\n| `dataslice_id`  \
        \      | `Optional[str]`       | ID of the dataslice to upsert metadata for.\
        \                                  |\n| `metadata`            | `Deasy_Metadata`\
        \      | Metadata to upsert in the form `{file_name: {tag_name: tag_value}}`.\
        \         |\n\n## Response\n\n- **200**: Metadata upserted successfully  \n\
        \    - Returns: `{ \"success\": bool }`\n- **500**: Internal Server Error\n\
        \n## Example\n\n```json\n{\n  \"data_connector_name\": \"my-connector\",\n\
        \  \"metadata\": {\n    \"document1.pdf\": {\n      \"category\": \"invoice\"\
        ,\n      \"date\": \"2024-01-15\"\n    },\n    \"document2.pdf\": {\n    \
        \  \"category\": \"receipt\",\n      \"status\": \"processed\"\n    }\n  }\n\
        }\n```"
      operationId: upsert_metadata_route_metadata_upsert_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertMetadataRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertMetadataResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.metadata.upsert(\n    metadata={\n        \"foo\": {\n      \
          \      \"foo\": {}\n        }\n    },\n)\nprint(response.success)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.metadata.upsert({ metadata:\
          \ { foo: { foo: {} } } });\n\nconsole.log(response.success);"
  /metadata/list:
    post:
      tags:
      - Metadata
      summary: List
      description: "Get filtered metadata based on conditions. Supports shared connections.\n\
        \n## Request Body\n\n| Field                 | Type                  | Description\
        \                                                                  |\n|-----------------------|-----------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name` | `str`                 | Name of the data connector\
        \ (vector database profile).                        |\n| `dataslice_id`  \
        \      | `Optional[str]`       | ID of the dataslice to get files from.  \
        \                                     |\n| `tag_names`           | `Optional[List[str]]`\
        \ | List of tag names to include in the metadata.                        \
        \        |\n| `include_chunk_level` | `Optional[bool]`      | Whether to include\
        \ chunk-level metadata. Default: `true`                     |\n| `file_names`\
        \          | `Optional[List[str]]` | List of specific file names to include\
        \ in the metadata.                      |\n| `chunk_ids`           | `Optional[List[str]]`\
        \ | List of specific chunk IDs to include in the metadata.               \
        \        |\n\n## Response\n\n- **200**: Metadata retrieved successfully  \n\
        \    - Without `chunk_ids`: Returns metadata grouped by filename, tag, and\
        \ level  \n      `{filename: {tag_id: {chunk_level: {chunk_id: metadata},\
        \ file_level: metadata}}}`\n    - With `chunk_ids`: Returns metadata by chunk\
        \ ID  \n      `{chunk_id: {metadata}}`\n- **500**: Internal Server Error\n\
        \n## Example\n\n```json\n{\n  \"data_connector_name\": \"my-connector\",\n\
        \  \"dataslice_id\": \"abc123\",\n  \"tag_names\": [\"category\", \"date\"\
        ],\n  \"include_chunk_level\": true,\n  \"file_names\": [\"document1.pdf\"\
        , \"document2.pdf\"]\n}\n```"
      operationId: list_metadata_route_metadata_list_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListMetadataRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetadataResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nmetadata\
          \ = client.metadata.list(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(metadata.metadata)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst metadata = await client.metadata.list({ data_connector_name:\
          \ 'data_connector_name' });\n\nconsole.log(metadata.metadata);"
  /metadata/list_paginated:
    post:
      tags:
      - Metadata
      summary: List Paginated
      description: "Get paginated filtered metadata based on conditions.\n\n## Request\
        \ Body\n\n| Field                 | Type                  | Description  \
        \                                                                |\n|-----------------------|-----------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name` | `str`                 | Name of the data connector\
        \ (vector database profile).                        |\n| `dataslice_id`  \
        \      | `Optional[str]`       | ID of the dataslice to get files from.  \
        \                                     |\n| `tag_names`           | `Optional[List[str]]`\
        \ | List of tag names to include in the metadata.                        \
        \        |\n| `include_chunk_level` | `Optional[bool]`      | Whether to include\
        \ chunk-level metadata. Default: `true`                     |\n| `offset`\
        \              | `Optional[int]`       | Pagination offset to start from.\
        \ Default: `0`                                |\n| `limit`               |\
        \ `Optional[int]`       | Maximum number of metadata items to return. Default:\
        \ `50`                    |\n\n## Response\n\n- **200**: Metadata retrieved\
        \ successfully  \n    - Returns: `{ \"metadata\": Deasy_Metadata, \"next_offset\"\
        : Optional[int] }`\n- **500**: Internal Server Error\n\n## Example\n\n```json\n\
        {\n  \"data_connector_name\": \"my-connector\",\n  \"dataslice_id\": \"abc123\"\
        ,\n  \"tag_names\": [\"category\", \"date\"],\n  \"include_chunk_level\":\
        \ true,\n  \"offset\": 0,\n  \"limit\": 50\n}\n```"
      operationId: list_paginated_metadata_route_metadata_list_paginated_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPaginatedMetadataRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaginatedMetadataResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.metadata.list_paginated(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(response.metadata)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.metadata.listPaginated({\
          \ data_connector_name: 'data_connector_name' });\n\nconsole.log(response.metadata);"
  /metadata/delete:
    post:
      tags:
      - Metadata
      summary: Delete
      description: "Delete metadata for specified files, tags, and/or conditions.\n\
        \n## Request Body\n\n| Field                 | Type                | Description\
        \                                                                  |\n|-----------------------|---------------------|------------------------------------------------------------------------------|\n\
        | `data_connector_name` | `str`               | Name of the data connector\
        \ (vector database profile) to delete metadata from.|\n| `file_names`    \
        \      | `Optional[List[str]]` | List of file names to delete metadata for.\
        \                                  |\n| `tags`                | `Optional[List[str]]`\
        \ | List of tags to filter which metadata to delete.                     \
        \       |\n| `conditions`          | `Optional[Condition]` | Additional conditions\
        \ to filter which metadata to delete.                   |\n\n## Response\n\
        \n- **200**: Metadata deleted successfully  \n    - Returns: `{ \"chunk_deleted_count\"\
        : int, \"file_deleted_count\": int }`\n- **500**: Internal Server Error\n\n\
        ## Example\n\n```json\n{\n  \"data_connector_name\": \"my-connector\",\n \
        \ \"file_names\": [\"document1.pdf\", \"document2.pdf\"],\n  \"tags\": [\"\
        archived\", \"old\"]\n}\n```"
      operationId: delete_metadata_route_metadata_delete_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/app__models__models_metadata__DeleteMetadataRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__models__models_metadata__DeleteMetadataResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nmetadata\
          \ = client.metadata.delete(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(metadata.chunk_deleted_count)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst metadata = await client.metadata.delete({ data_connector_name:\
          \ 'data_connector_name' });\n\nconsole.log(metadata.chunk_deleted_count);"
  /progress_tracker/task_status:
    post:
      tags:
      - Task Tracking
      summary: Get Status
      description: "Get the status of a task by job ID.\n\n## Request Body\n\n| Field\
        \    | Type  | Description                                      |\n|----------|-------|--------------------------------------------------|\n\
        | `job_id` | `str` | The unique identifier for the job to check.      |\n\n\
        ## Response\n\n- **200**: Task status retrieved successfully  \n    - Returns:\
        \ `{ \"percent_complete\": float, \"tags_created\": Optional[int], \"status\"\
        : str }`\n- **404**: Job ID not found\n\n## Example\n\n```json\n{\n  \"job_id\"\
        : \"abc123-def456-ghi789\"\n}\n```"
      operationId: get_task_status_route_progress_tracker_task_status_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskStatusResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.task_status.get_status(\n    job_id=\"job_id\",\n)\nprint(response.percent_complete)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.taskStatus.getStatus({\
          \ job_id: 'job_id' });\n\nconsole.log(response.percent_complete);"
  /dataslice/create:
    post:
      tags:
      - Data Slices
      summary: Create
      description: "Create a new data slice based on specified conditions.\n\n## Request\
        \ Body\n\n| Field             | Type           | Description             \
        \                                                   |\n|-------------------|----------------|----------------------------------------------------------------------------|\n\
        | `dataslice_name`  | `str`          | The name to assign to the newly created\
        \ data slice.                        |\n| `condition`       | `Optional[List[Dict]]`\
        \ | (Legacy) List of file qualifying conditions.                         |\n\
        | `condition_new`   | `Optional[Any]` | New format: advanced file qualifying\
        \ conditions.                           |\n| `description`     | `Optional[str]`\
        \ | Description of the data slice.                                       \
        \      |\n| `status`          | `str`          | The status of the data slice\
        \ (e.g., active).                               |\n| `data_points`     | `Optional[int]`\
        \ | Number of data points in the data slice.                             \
        \      |\n| `latest_graph`    | `Optional[Dict]` | Most recent graph reference/metadata.\
        \                                      |\n| `graph_id`        | `Optional[str]`\
        \ | ID of the related graph, if applicable.                              \
        \      |\n| `data_connector_name` | `str`      | Name of the data connector\
        \ (vector database profile).                      |\n| `parent_dataslice_id`\
        \ | `Optional[str]` | (Optional) Parent data slice ID, for lineage.      \
        \                  |\n\n## Response\n\n- **201**: Data slice created successfully\
        \  \n    - Returns: `{ \"dataslice_id\": \"<uuid>\" }`\n- **500**: Internal\
        \ Server Error.\n\n## Example\n\n```json\n{\n  \"dataslice_name\": \"Customer\
        \ Purchases Q2\",\n  \"condition\": [\n    { \"field\": \"created_date\",\
        \ \"op\": \"gte\", \"value\": \"2024-04-01\" }\n  ],\n  \"description\": \"\
        Purchase data from Q2 2024\",\n  \"status\": \"active\",\n  \"data_points\"\
        : 4000,\n  \"data_connector_name\": \"prod-warehouse\"\n}\n```"
      operationId: create_dataslice_route_dataslice_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasliceRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDatasliceResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ndata_slice\
          \ = client.data_slice.create(\n    data_connector_name=\"data_connector_name\"\
          ,\n    dataslice_name=\"dataslice_name\",\n)\nprint(data_slice.dataslice_id)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst dataSlice = await client.dataSlice.create({\n\
          \  data_connector_name: 'data_connector_name',\n  dataslice_name: 'dataslice_name',\n\
          });\n\nconsole.log(dataSlice.dataslice_id);"
  /dataslice/list:
    get:
      tags:
      - Data Slices
      summary: List
      description: "Retrieve all data slices associated with the currently authenticated\
        \ user.\n\n### Response\n\nReturns a JSON object containing a list of dataslices:\n\
        \n```json\n{\n  \"dataslices\": [\n    {\n      \"dataslice_id\": \"string\"\
        ,\n      \"dataslice_name\": \"string\",\n      \"description\": \"string\"\
        ,\n      \"status\": \"active\",\n      \"data_points\": 123,\n      \"latest_graph\"\
        : { /* graph details */ },\n      \"graph_id\": \"string\",\n      \"data_connector_name\"\
        : \"string\",\n      \"parent_dataslice_id\": \"string or null\"\n    },\n\
        \    ...\n  ]\n}\n```"
      operationId: list_dataslices_route_dataslice_list_get
      responses:
        '200':
          description: A list of dataslices the user can access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataslicesResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ndata_slices\
          \ = client.data_slice.list()\nprint(data_slices.dataslices)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst dataSlices = await client.dataSlice.list();\n\
          \nconsole.log(dataSlices.dataslices);"
  /dataslice/delete:
    delete:
      tags:
      - Data Slices
      summary: Delete
      description: "Delete a single data slice by its unique identifier.\n\n## Request\
        \ Body\n\n| Field             | Type           | Description             \
        \                                                   |\n|-------------------|----------------|----------------------------------------------------------------------------|\n\
        | `dataslice_id`    | `str`        | The unique identifier of the data slice\
        \ to delete.                        |\n\n### Response\n\nReturns a confirmation\
        \ message of the successful deletion and any associated data.\n\n```json\n\
        {\n  \"message\": \"Data slice deleted successfully\",\n  \"data\": {\n  \
        \  // Details of deletion outcome\n  }\n}\n```"
      operationId: delete_dataslice_route_dataslice_delete_delete
      parameters:
      - name: dataslice_id
        in: query
        required: true
        schema:
          type: string
          title: Dataslice Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDatasliceResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ndata_slice\
          \ = client.data_slice.delete(\n    dataslice_id=\"dataslice_id\",\n)\nprint(data_slice.data)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst dataSlice = await client.dataSlice.delete({ dataslice_id:\
          \ 'dataslice_id' });\n\nconsole.log(dataSlice.data);"
  /dataslice/export/metadata:
    post:
      tags:
      - Data Slices
      summary: Export
      description: "Export metadata for a specific data slice or the entire data connector,\
        \ in JSON or CSV format.\n\n## Request Body\n\n| Field                   \
        \   | Type                  | Description                                \
        \                                        |\n|----------------------------|-----------------------|------------------------------------------------------------------------------------|\n\
        | `data_connector_name`      | `str`                 | Name of the data connector\
        \ to export metadata from.                                |\n| `dataslice_id`\
        \             | `Optional[str]`       | ID of the dataslice to export metadata\
        \ from. If omitted, all data is included.     |\n| `export_file_level`   \
        \     | `bool`                | `True` for file-level export, `False` for\
        \ chunk-level export.                      |\n| `export_format`          \
        \  | `Optional[ExportFormat]` | Desired export format: `json` or `csv` (e.g.,\
        \ `\"json\"`, `\"csv\"`).               |\n| `selected_metadata_fields` |\
        \ `Optional[List[str]]` | List of metadata fields to include in the export.\
        \                                  |\n\n## Response\n\n- **200**: Metadata\
        \ exported successfully  \n    - Returns: A streaming file response containing\
        \ the exported metadata in the requested format.\n- **500**: Internal Server\
        \ Error\n\n## Example\n\n```json\n{\n  \"data_connector_name\": \"example-connector\"\
        ,\n  \"dataslice_id\": \"abc123\",\n  \"export_file_level\": true,\n  \"export_format\"\
        : \"json\",\n  \"selected_metadata_fields\": [\"field1\", \"field2\"]\n}\n\
        ```"
      operationId: export_data_slice_dataslice_export_metadata_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDatasliceMetadataRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.data_slice.export(\n    data_connector_name=\"data_connector_name\"\
          ,\n)\nprint(response)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.dataSlice.export({ data_connector_name:\
          \ 'data_connector_name' });\n\nconsole.log(response);"
  /destination/create:
    post:
      tags:
      - Destinations
      summary: Create
      description: "Create a new destination connector for data export.\n\n## Request\
        \ Body\n\n| Field             | Type                  | Description      \
        \                                |\n|-------------------|-----------------------|--------------------------------------------------|\n\
        | `connector_name`  | `str`                 | The profile name of the destination\
        \ to create.   |\n| `connector_body`  | `DestinationConfigs`  | Configuration\
        \ object for the destination.        |\n\n## Response\n\n- **200**: Destination\
        \ created successfully  \n    - Returns: `{ \"profile_id\": str }`\n- **500**:\
        \ Internal Server Error (e.g., failed to store secret)\n\n## Example\n\n```json\n\
        {\n  \"connector_name\": \"my-destination\",\n  \"connector_body\": {\n  \
        \  \"type\": \"s3\",\n    \"config\": {\n      \"bucket\": \"my-bucket\",\n\
        \      \"region\": \"us-east-1\"\n    }\n  }\n}\n```"
      operationId: create_destination_route_destination_create_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDestinationConnectorRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nconnector_response\
          \ = client.destination.create(\n    connector_body={\n        \"client_id\"\
          : \"client_id\",\n        \"client_secret\": \"client_secret\",\n      \
          \  \"documents_library_folder_name\": \"documents_library_folder_name\"\
          ,\n        \"name\": \"name\",\n        \"sharepoint_site_name\": \"sharepoint_site_name\"\
          ,\n        \"tenant_id\": \"tenant_id\",\n    },\n    connector_name=\"\
          connector_name\",\n)\nprint(connector_response.profile_id)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst connectorResponse = await client.destination.create({\n\
          \  connector_body: {\n    client_id: 'client_id',\n    client_secret: 'client_secret',\n\
          \    documents_library_folder_name: 'documents_library_folder_name',\n \
          \   name: 'name',\n    sharepoint_site_name: 'sharepoint_site_name',\n \
          \   tenant_id: 'tenant_id',\n  },\n  connector_name: 'connector_name',\n\
          });\n\nconsole.log(connectorResponse.profile_id);"
  /destination/list:
    post:
      tags:
      - Destinations
      summary: List
      description: "List all destinations for the authenticated user.\n\n## Response\n\
        \n- **200**: Successfully retrieved list of destinations  \n    - Returns:\
        \ `{ \"connectors\": DestinationConfigDict }`\n\n## Example Response\n\n```json\n\
        {\n  \"connectors\": {\n    \"my-s3-destination\": {\n      \"type\": \"s3\"\
        ,\n      \"config\": {\n        \"bucket\": \"my-bucket\",\n        \"region\"\
        : \"us-east-1\"\n      }\n    },\n    \"my-webhook-destination\": {\n    \
        \  \"type\": \"webhook\",\n      \"config\": {\n        \"url\": \"https://api.example.com/webhook\"\
        \n      }\n    }\n  }\n}\n```"
      operationId: list_destinations_route_destination_list_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDestinationConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\ndestinations\
          \ = client.destination.list()\nprint(destinations.connectors)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst destinations = await client.destination.list();\n\
          \nconsole.log(destinations.connectors);"
  /destination/delete:
    post:
      tags:
      - Destinations
      summary: Delete
      description: "Delete a destination connector.\n\n**Request Body**\n\n```json\n\
        {\n  \"connector_name\": \"my-s3-destination\"\n}\n```\n\n| Field        \
        \    | Type  | Description                                     |\n|------------------|-------|-------------------------------------------------|\n\
        | connector_name   | str   | The profile name of the destination to delete.\
        \  |\n\n**Response**\n\n- 200: Destination deleted successfully  \n    - Returns:\
        \ `{ \"profile_id\": str }`"
      operationId: delete_destination_route_destination_delete_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteDestinationConnectorRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /dataslice/export/metadata/destination:
    post:
      tags:
      - Destinations
      summary: Export
      description: "Export dataslice metadata and/or nodes to a configured destination.\n\
        \nThis endpoint supports exporting data from a dataslice or data connector\
        \ to a destination \nsystem. For small datasets (fewer than 100 files), the\
        \ export runs synchronously. For larger \ndatasets, the export is processed\
        \ in the background and returns a tracker ID for monitoring progress.\n\n\
        ## Request Body\n\n| Field                      | Type                   \
        \    | Required | Description                                            \
        \                                           |\n|----------------------------|----------------------------|----------|---------------------------------------------------------------------------------------------------|\n\
        | `dataslice_id`             | `str`                      | No       | The\
        \ ID of the dataslice to export. Required if `data_connector_name` is not\
        \ provided.            |\n| `data_connector_name`      | `str`           \
        \           | No       | The name of the data connector to export from. Required\
        \ if `dataslice_id` is not provided.       |\n| `destination_name`       \
        \  | `str`                      | No       | The name of the configured destination\
        \ to export to.                                              |\n| `export_tags`\
        \              | `List[str]`                | No       | List of specific\
        \ tags to export. If empty, all tags are exported.                       \
        \         |\n| `export_level`             | `ExportLevel`              | No\
        \       | Level of export: `\"file\"`, `\"chunk\"`, or `\"both\"` (default:\
        \ `\"both\"`).                          |\n| `export_nodes`             |\
        \ `bool`                     | No       | Whether to export node data (default:\
        \ `true`).                                                    |\n| `export_metadata`\
        \          | `bool`                     | No       | Whether to export metadata\
        \ (default: `true`).                                                     |\n\
        | `metadata_format`          | `MetadataStorageFormat`    | No       | Format\
        \ for metadata storage: `\"column_store\"` or `\"json_store\"`.          \
        \                      |\n\n## Response\n\n- **200**: Export completed or\
        \ initiated successfully\n    - Returns: `ExportDatasliceDestinationResponse`\
        \ with:\n        - `message`: Status message\n        - `success`: Number\
        \ of successfully exported items\n        - `failed`: Number of failed exports\n\
        \        - `failed_items`: List of items that failed to export\n        -\
        \ `failed_tags`: List of tags that failed to export (if applicable)\n    \
        \    - `tracker_id`: Progress tracker ID for background exports (only for\
        \ large datasets)\n- **400**: Bad Request (e.g., missing required parameters)\n\
        - **500**: Internal Server Error\n\n## Example Request\n\n```json\n{\n  \"\
        dataslice_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"destination_name\"\
        : \"my-destination\",\n  \"export_tags\": [\"contracts\", \"invoices\"],\n\
        \  \"export_level\": \"both\",\n  \"export_nodes\": true,\n  \"export_metadata\"\
        : true,\n  \"metadata_format\": \"column_store\"\n}\n```\n\n## Example Response\
        \ (Synchronous)\n\n```json\n{\n  \"message\": \"Export completed successfully\"\
        ,\n  \"success\": 45,\n  \"failed\": 0,\n  \"failed_items\": [],\n  \"failed_tags\"\
        : null,\n  \"tracker_id\": null\n}\n```\n\n## Example Response (Background\
        \ Processing)\n\n```json\n{\n  \"message\": \"Export started in background.\
        \ Use tracker_id to monitor progress.\",\n  \"success\": 0,\n  \"failed\"\
        : 0,\n  \"failed_items\": [],\n  \"failed_tags\": null,\n  \"tracker_id\"\
        : \"export-12345678-90ab-cdef-1234-567890abcdef\"\n}\n```"
      operationId: export_destination_route_dataslice_export_metadata_destination_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDatasliceDestinationRequest'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportDatasliceDestinationResponse'
        '403':
          description: Missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal Server Error. An unexpected error occurred while processing
            the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
      x-codeSamples:
      - lang: Python
        source: "from unstructured import UnstructuredClient\n\nclient = UnstructuredClient(\n\
          \    username=\"My Username\",\n    password=\"My Password\",\n)\nresponse\
          \ = client.destination.export()\nprint(response.tracker_id)"
      - lang: JavaScript
        source: "import UnstructuredClient from 'unstructured-sdk';\n\nconst client\
          \ = new UnstructuredClient({\n  username: 'My Username',\n  password: 'My\
          \ Password',\n});\n\nconst response = await client.destination.export();\n\
          \nconsole.log(response.tracker_id);"
components:
  schemas:
    AzureSQLDestinationConfig:
      properties:
        type:
          type: string
          const: AzureSQLNodeDestinationManager
          title: Type
          default: AzureSQLNodeDestinationManager
        server:
          type: string
          title: Server
        database:
          type: string
          title: Database
        username:
          type: string
          title: Username
        password:
          type: string
          title: Password
        table_name:
          type: string
          title: Table Name
        port:
          type: integer
          title: Port
          default: 1433
        dimension_threshold:
          anyOf:
          - type: integer
          - type: 'null'
          title: Dimension Threshold
          default: 384
        filename_key:
          type: string
          title: Filename Key
          default: filename
        text_key:
          type: string
          title: Text Key
          default: text
        id_key:
          type: string
          title: Id Key
          default: id
        driver:
          anyOf:
          - type: string
          - type: 'null'
          title: Driver
        create_new_table:
          type: boolean
          title: Create New Table
          default: false
      type: object
      required:
      - server
      - database
      - username
      - password
      - table_name
      title: AzureSQLDestinationConfig
    BaseTag:
      properties:
        name:
          type: string
          title: Name
        values:
          items:
            anyOf:
            - type: string
            - type: number
            - type: integer
          type: array
          title: Values
        operator:
          anyOf:
          - type: string
          - type: 'null'
          title: Operator
          default: any
      type: object
      required:
      - name
      - values
      title: BaseTag
    ClassifyBulkRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        total_data_sets:
          anyOf:
          - type: integer
          - type: 'null'
          title: Total Data Sets
        tag_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tag Names
        tag_datas:
          anyOf:
          - additionalProperties:
              $ref: '#/components/schemas/Tag-Input'
            type: object
          - type: 'null'
          title: Tag Datas
        overwrite:
          type: boolean
          title: Overwrite
          default: false
        job_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Job Id
        hierarchy_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Hierarchy Name
        hierarchy_data:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Hierarchy Data
          default: {}
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        conditions:
          anyOf:
          - $ref: '#/components/schemas/Condition-Input'
          - type: 'null'
      type: object
      required:
      - data_connector_name
      title: ClassifyBulkRequest
    ClassifyBulkResponse:
      properties:
        message:
          type: string
          title: Message
      type: object
      required:
      - message
      title: ClassifyBulkResponse
    ClassifyRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        file_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Names
        tag_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tag Names
        tag_datas:
          anyOf:
          - additionalProperties:
              $ref: '#/components/schemas/Tag-Input'
            type: object
          - type: 'null'
          title: Tag Datas
        overwrite:
          type: boolean
          title: Overwrite
          default: false
        job_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Job Id
        soft_run:
          type: boolean
          title: Soft Run
          default: false
        hierarchy_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Hierarchy Name
        hierarchy_data:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Hierarchy Data
          default: {}
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
      type: object
      required:
      - data_connector_name
      title: ClassifyRequest
    ClassifyResponse:
      properties:
        message:
          type: string
          title: Message
        output:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Output
      type: object
      required:
      - message
      title: ClassifyResponse
    Condition-Input:
      properties:
        condition:
          anyOf:
          - $ref: '#/components/schemas/LogicCondition'
          - type: 'null'
        children:
          anyOf:
          - items:
              $ref: '#/components/schemas/Condition-Input'
            type: array
          - type: 'null'
          title: Children
        tag:
          anyOf:
          - $ref: '#/components/schemas/BaseTag'
          - type: 'null'
      type: object
      title: Condition
    Condition-Output:
      properties:
        condition:
          anyOf:
          - $ref: '#/components/schemas/LogicCondition'
          - type: 'null'
        children:
          anyOf:
          - items:
              $ref: '#/components/schemas/Condition-Output'
            type: array
          - type: 'null'
          title: Children
        tag:
          anyOf:
          - $ref: '#/components/schemas/BaseTag'
          - type: 'null'
      type: object
      title: Condition
    ConnectorResponse:
      properties:
        profile_id:
          type: string
          title: Profile Id
      type: object
      required:
      - profile_id
      title: ConnectorResponse
    CreateDatasliceRequest:
      properties:
        dataslice_name:
          type: string
          title: Dataslice Name
        condition:
          anyOf:
          - $ref: '#/components/schemas/Condition-Input'
          - type: 'null'
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        status:
          type: string
          title: Status
          default: active
        data_points:
          anyOf:
          - type: integer
          - type: 'null'
          title: Data Points
        latest_graph:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Latest Graph
        graph_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Graph Id
        data_connector_name:
          type: string
          title: Data Connector Name
        parent_dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Parent Dataslice Id
      type: object
      required:
      - dataslice_name
      - data_connector_name
      title: CreateDatasliceRequest
    CreateDatasliceResponse:
      properties:
        dataslice_id:
          type: string
          title: Dataslice Id
      type: object
      required:
      - dataslice_id
      title: CreateDatasliceResponse
    CreateDestinationConnectorRequest:
      properties:
        connector_name:
          type: string
          title: Connector Name
        connector_body:
          anyOf:
          - $ref: '#/components/schemas/SharepointDestinationConfig'
          - $ref: '#/components/schemas/PostgresDestinationConfig'
          - $ref: '#/components/schemas/AzureSQLDestinationConfig'
          title: Connector Body
      type: object
      required:
      - connector_name
      - connector_body
      title: CreateDestinationConnectorRequest
    CreateVDBConnectorRequest:
      properties:
        connector_name:
          type: string
          title: Connector Name
        connector_body:
          anyOf:
          - $ref: '#/components/schemas/PSQLConnectorConfig'
          - $ref: '#/components/schemas/QdrantConnectorConfig'
          - $ref: '#/components/schemas/S3ConnectorConfig'
          - $ref: '#/components/schemas/SharepointConnectorConfig'
          title: Connector Body
      type: object
      required:
      - connector_name
      - connector_body
      title: CreateVDBConnectorRequest
    DeasyDataslice:
      properties:
        dataslice_id:
          type: string
          title: Dataslice Id
        dataslice_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Name
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        status:
          type: string
          title: Status
        data_points:
          anyOf:
          - type: integer
          - type: 'null'
          title: Data Points
        last_updated:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Last Updated
        latest_graph:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Latest Graph
        graph_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Graph Id
        condition:
          anyOf:
          - items:
              additionalProperties: true
              type: object
            type: array
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Condition
        condition_new:
          anyOf:
          - $ref: '#/components/schemas/Condition-Output'
          - type: 'null'
        export_collection_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Export Collection Name
        vector_db_config:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Vector Db Config
      type: object
      required:
      - dataslice_id
      - status
      title: DeasyDataslice
    DeasyInputTag-Input:
      properties:
        tag_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Tag Id
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        name:
          type: string
          title: Name
        output_type:
          type: string
          title: Output Type
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
          default: ''
        available_values:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Available Values
          default: []
        examples:
          anyOf:
          - items:
              anyOf:
              - type: string
              - additionalProperties: true
                type: object
            type: array
          - type: 'null'
          title: Examples
          default: []
        maxValues:
          anyOf:
          - type: integer
          - type: 'null'
          title: Maxvalues
        date_format:
          anyOf:
          - type: string
          - type: 'null'
          title: Date Format
        tuned:
          anyOf:
          - type: integer
          - type: 'null'
          title: Tuned
          default: 0
        enhance_file_metadata:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Enhance File Metadata
          default: true
        group:
          anyOf:
          - type: string
          - type: 'null'
          title: Group
        min_confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Min Confidence
        strategy:
          anyOf:
          - type: string
          - type: 'null'
          title: Strategy
          default: LLM
        patterns:
          anyOf:
          - items:
              $ref: '#/components/schemas/RegexPattern'
            type: array
          - type: 'null'
          title: Patterns
          default: []
        visual_rules:
          anyOf:
          - items:
              $ref: '#/components/schemas/RuleBasedRule-Input'
            type: array
          - type: 'null'
          title: Visual Rules
          default: []
        scope:
          anyOf:
          - type: string
          - type: 'null'
          title: Scope
          default: ALL_PAGES
      type: object
      required:
      - name
      - output_type
      title: DeasyInputTag
    DeasyInputTag-Output:
      properties:
        tag_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Tag Id
        id:
          anyOf:
          - type: string
          - type: 'null'
          title: Id
        name:
          type: string
          title: Name
        output_type:
          type: string
          title: Output Type
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
          default: ''
        available_values:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Available Values
          default: []
        examples:
          anyOf:
          - items:
              anyOf:
              - type: string
              - additionalProperties: true
                type: object
            type: array
          - type: 'null'
          title: Examples
          default: []
        maxValues:
          anyOf:
          - type: integer
          - type: 'null'
          title: Maxvalues
        date_format:
          anyOf:
          - type: string
          - type: 'null'
          title: Date Format
        tuned:
          anyOf:
          - type: integer
          - type: 'null'
          title: Tuned
          default: 0
        enhance_file_metadata:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Enhance File Metadata
          default: true
        group:
          anyOf:
          - type: string
          - type: 'null'
          title: Group
        min_confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Min Confidence
        strategy:
          anyOf:
          - type: string
          - type: 'null'
          title: Strategy
          default: LLM
        patterns:
          anyOf:
          - items:
              $ref: '#/components/schemas/RegexPattern'
            type: array
          - type: 'null'
          title: Patterns
          default: []
        visual_rules:
          anyOf:
          - items:
              $ref: '#/components/schemas/RuleBasedRule-Output'
            type: array
          - type: 'null'
          title: Visual Rules
          default: []
        scope:
          anyOf:
          - type: string
          - type: 'null'
          title: Scope
          default: ALL_PAGES
      type: object
      required:
      - name
      - output_type
      title: DeasyInputTag
    DeasySchema:
      properties:
        schema_id:
          type: string
          title: Schema Id
        schema_name:
          type: string
          title: Schema Name
        schema_description:
          type: string
          title: Schema Description
        schema_data:
          additionalProperties: true
          type: object
          title: Schema Data
        user_id:
          type: string
          title: User Id
        created_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Created At
        updated_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Updated At
        refreshed_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Refreshed At
      type: object
      required:
      - schema_id
      - schema_name
      - schema_description
      - schema_data
      - user_id
      title: DeasySchema
    DeasyTag:
      properties:
        tag_id:
          type: string
          title: Tag Id
        username:
          type: string
          title: Username
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        output_type:
          $ref: '#/components/schemas/TagOutputType'
          default: string
        available_values:
          items:
            type: string
          type: array
          title: Available Values
          default: []
        examples:
          items:
            anyOf:
            - type: string
            - additionalProperties: true
              type: object
          type: array
          title: Examples
          default: []
        created_at:
          type: string
          format: date-time
          title: Created At
        updated_at:
          type: string
          format: date-time
          title: Updated At
          default: '2025-10-31T10:56:45.121372'
        tuned:
          anyOf:
          - type: integer
          - type: 'null'
          title: Tuned
          default: 0
        maxValues:
          anyOf:
          - type: integer
          - type: 'null'
          title: Maxvalues
        date_format:
          anyOf:
          - type: string
          - type: 'null'
          title: Date Format
          default: MM-dd-YYYY
        enhance_file_metadata:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Enhance File Metadata
          default: true
        group:
          anyOf:
          - type: string
          - type: 'null'
          title: Group
        min_confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Min Confidence
        strategy:
          anyOf:
          - type: string
          - type: 'null'
          title: Strategy
          default: LLM
        patterns:
          anyOf:
          - items:
              $ref: '#/components/schemas/RegexPattern'
            type: array
          - type: 'null'
          title: Patterns
          default: []
        visual_rules:
          anyOf:
          - items:
              $ref: '#/components/schemas/RuleBasedRule-Output'
            type: array
          - type: 'null'
          title: Visual Rules
          default: []
        scope:
          anyOf:
          - type: string
          - type: 'null'
          title: Scope
          default: ALL_PAGES
      type: object
      required:
      - tag_id
      - username
      - name
      - description
      - created_at
      title: DeasyTag
    DeleteConnectorRequest:
      properties:
        connector_name:
          type: string
          title: Connector Name
      type: object
      required:
      - connector_name
      title: DeleteConnectorRequest
    DeleteDatasliceResponse:
      properties:
        message:
          type: string
          title: Message
        data:
          additionalProperties: true
          type: object
          title: Data
      type: object
      required:
      - message
      - data
      title: DeleteDatasliceResponse
    DeleteDestinationConnectorRequest:
      properties:
        connector_name:
          type: string
          title: Connector Name
      type: object
      required:
      - connector_name
      title: DeleteDestinationConnectorRequest
    ExportDatasliceDestinationRequest:
      properties:
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        data_connector_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Data Connector Name
        destination_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Destination Name
        export_tags:
          items: {}
          type: array
          title: Export Tags
          default: []
        export_level:
          $ref: '#/components/schemas/ExportLevel'
          default: both
        export_nodes:
          type: boolean
          title: Export Nodes
          default: true
        export_metadata:
          type: boolean
          title: Export Metadata
          default: true
        metadata_format:
          anyOf:
          - $ref: '#/components/schemas/MetadataStorageFormat'
          - type: 'null'
      type: object
      title: ExportDatasliceDestinationRequest
    ExportDatasliceDestinationResponse:
      properties:
        message:
          type: string
          title: Message
        success:
          type: integer
          title: Success
        failed:
          type: integer
          title: Failed
        failed_items:
          items:
            type: string
          type: array
          title: Failed Items
        failed_tags:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Failed Tags
        tracker_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Tracker Id
      type: object
      required:
      - message
      - success
      - failed
      - failed_items
      title: ExportDatasliceDestinationResponse
    ExportDatasliceMetadataRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        export_file_level:
          type: boolean
          title: Export File Level
          default: false
        export_format:
          anyOf:
          - $ref: '#/components/schemas/ExportFormat'
          - type: 'null'
        selected_metadata_fields:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Selected Metadata Fields
      type: object
      required:
      - data_connector_name
      title: ExportDatasliceMetadataRequest
    ExportFormat:
      type: string
      enum:
      - json
      - csv
      title: ExportFormat
    ExportLevel:
      type: string
      enum:
      - file
      - chunk
      - both
      title: ExportLevel
    GraphNode:
      properties:
        label:
          anyOf:
          - type: string
          - type: 'null'
          title: Label
          default: Root
        path:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Path
          default: []
      type: object
      title: GraphNode
    GraphTagType:
      type: string
      enum:
      - open_ended
      - binary
      - mixed
      - defined_values
      - hierarchy
      title: GraphTagType
    HTTPError:
      properties:
        detail:
          type: string
          title: Detail
      type: object
      required:
      - detail
      title: HTTPError
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    JobStatus:
      type: string
      enum:
      - in_progress
      - completed
      - aborted
      - failed
      title: JobStatus
    ListDataslicesResponse:
      properties:
        dataslices:
          items:
            $ref: '#/components/schemas/DeasyDataslice'
          type: array
          title: Dataslices
      type: object
      required:
      - dataslices
      title: ListDataslicesResponse
    ListDestinationConnectorResponse:
      properties:
        connectors:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/SharepointDestinationConfig'
            - $ref: '#/components/schemas/PostgresDestinationConfig'
            - $ref: '#/components/schemas/AzureSQLDestinationConfig'
          type: object
          title: Connectors
      type: object
      required:
      - connectors
      title: ListDestinationConnectorResponse
    ListMetadataRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        tag_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tag Names
        include_chunk_level:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Include Chunk Level
          default: true
        file_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Names
        chunk_ids:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Chunk Ids
      type: object
      required:
      - data_connector_name
      title: ListMetadataRequest
    ListMetadataResponse:
      properties:
        metadata:
          anyOf:
          - additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/TagMetadata'
              type: object
            type: object
          - additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/Metadata'
              type: object
            type: object
          title: Metadata
      type: object
      required:
      - metadata
      title: ListMetadataResponse
    ListPaginatedMetadataRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        tag_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tag Names
        include_chunk_level:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Include Chunk Level
          default: true
        offset:
          anyOf:
          - type: integer
          - type: 'null'
          title: Offset
          default: 0
        limit:
          anyOf:
          - type: integer
          - type: 'null'
          title: Limit
          default: 50
      type: object
      required:
      - data_connector_name
      title: ListPaginatedMetadataRequest
    ListPaginatedMetadataResponse:
      properties:
        metadata:
          anyOf:
          - additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/TagMetadata'
              type: object
            type: object
          - additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/Metadata'
              type: object
            type: object
          title: Metadata
        next_offset:
          anyOf:
          - type: integer
          - type: 'null'
          title: Next Offset
      type: object
      required:
      - metadata
      - next_offset
      title: ListPaginatedMetadataResponse
    ListSourceMetadataRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        group_by:
          anyOf:
          - type: string
          - type: 'null'
          title: Group By
          default: file
        metadata_keys:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Metadata Keys
        file_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Names
        point_ids:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Point Ids
        metadata_key_filters:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Metadata Key Filters
        metadata_value_filters:
          anyOf:
          - additionalProperties:
              items:
                type: string
              type: array
            type: object
          - type: 'null'
          title: Metadata Value Filters
        full_text_filters:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Full Text Filters
        limit:
          anyOf:
          - type: integer
          - type: 'null'
          title: Limit
        with_vectors:
          anyOf:
          - type: boolean
          - type: 'null'
          title: With Vectors
          default: false
      type: object
      required:
      - data_connector_name
      title: ListSourceMetadataRequest
    ListSourceMetadataResponse:
      properties:
        metadata:
          additionalProperties:
            additionalProperties: true
            type: object
          type: object
          title: Metadata
      type: object
      required:
      - metadata
      title: ListSourceMetadataResponse
    ListTagsResponse:
      properties:
        tags:
          items:
            $ref: '#/components/schemas/DeasyTag'
          type: array
          title: Tags
      type: object
      required:
      - tags
      title: ListTagsResponse
    ListTaxonomiesRequest:
      properties:
        taxonomy_ids:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Taxonomy Ids
      type: object
      title: ListTaxonomiesRequest
    ListTaxonomiesResponse:
      properties:
        taxonomies:
          items:
            $ref: '#/components/schemas/DeasySchema'
          type: array
          title: Taxonomies
      type: object
      required:
      - taxonomies
      title: ListTaxonomiesResponse
    ListVDBConnectorResponse:
      properties:
        connectors:
          additionalProperties:
            anyOf:
            - $ref: '#/components/schemas/PSQLConnectorConfig'
            - $ref: '#/components/schemas/QdrantConnectorConfig'
            - $ref: '#/components/schemas/S3ConnectorConfig'
            - $ref: '#/components/schemas/SharepointConnectorConfig'
          type: object
          title: Connectors
      type: object
      required:
      - connectors
      title: ListVDBConnectorResponse
    LogicCondition:
      type: string
      enum:
      - AND
      - OR
      title: LogicCondition
    Metadata:
      properties:
        values:
          items:
            anyOf:
            - type: string
            - type: number
            - type: integer
          type: array
          title: Values
        evidence:
          anyOf:
          - type: string
          - type: 'null'
          title: Evidence
      type: object
      required:
      - values
      title: Metadata
    MetadataStorageFormat:
      type: string
      enum:
      - column_store
      - json_store
      title: MetadataStorageFormat
    MetadataSuggestionRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        file_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Names
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        progress_tracking_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Progress Tracking Id
        schema_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Schema Name
        current_tree:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Current Tree
        condition:
          anyOf:
          - $ref: '#/components/schemas/Condition-Input'
          - type: 'null'
        node:
          anyOf:
          - $ref: '#/components/schemas/GraphNode'
          - type: 'null'
          default:
            label: Root
            path: []
        user_context:
          anyOf:
          - type: string
          - type: 'null'
          title: User Context
        context_level:
          anyOf:
          - type: string
          - type: 'null'
          title: Context Level
          default: file
        max_height:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Height
          default: 2
        use_existing_tags:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Use Existing Tags
          default: false
        use_extracted_tags:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Use Extracted Tags
          default: false
        use_mix_llm_and_source:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Use Mix Llm And Source
          default: false
        graph_tag_type:
          anyOf:
          - $ref: '#/components/schemas/GraphTagType'
          - type: 'null'
          default: open_ended
        min_tags_per_level:
          anyOf:
          - type: integer
          - type: 'null'
          title: Min Tags Per Level
          default: 1
        max_tags_per_level:
          anyOf:
          - type: integer
          - type: 'null'
          title: Max Tags Per Level
          default: 10
        set_max_values:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Set Max Values
          default: true
        values_per_tag:
          anyOf:
          - type: integer
          - type: 'null'
          title: Values Per Tag
        auto_save:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Auto Save
          default: true
        validate_tags:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Validate Tags
          default: true
        validation_sample_size:
          anyOf:
          - type: integer
          - type: 'null'
          title: Validation Sample Size
          default: 10
        not_found_threshold:
          anyOf:
          - type: number
          - type: 'null'
          title: Not Found Threshold
          default: 1
        use_hierarchical_clustering:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Use Hierarchical Clustering
          default: true
        deep_suggestion_mode:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Deep Suggestion Mode
          default: false
      type: object
      required:
      - data_connector_name
      title: MetadataSuggestionRequest
    MetadataSuggestionResponse:
      properties:
        status_code:
          anyOf:
          - type: integer
          - type: 'null'
          title: Status Code
          default: 200
        message:
          anyOf:
          - type: string
          - type: 'null'
          title: Message
          default: ''
        suggestion:
          additionalProperties: true
          type: object
          title: Suggestion
        suggested_tags:
          anyOf:
          - additionalProperties:
              $ref: '#/components/schemas/DeasyInputTag-Output'
            type: object
          - type: 'null'
          title: Suggested Tags
        node:
          anyOf:
          - $ref: '#/components/schemas/GraphNode'
          - type: 'null'
        tag_not_found_rates:
          anyOf:
          - additionalProperties:
              type: number
            type: object
          - type: 'null'
          title: Tag Not Found Rates
      type: object
      required:
      - suggestion
      title: MetadataSuggestionResponse
    OCRIngestRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        file_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Names
        job_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Job Id
        clean_up_out_of_sync:
          type: boolean
          title: Clean Up Out Of Sync
          default: true
        file_count_to_run:
          anyOf:
          - type: integer
          - type: 'null'
          title: File Count To Run
        use_llm:
          type: boolean
          title: Use Llm
          default: false
      type: object
      required:
      - data_connector_name
      title: OCRIngestRequest
    PSQLConnectorConfig:
      properties:
        type:
          type: string
          const: PSQLVectorDBManager
          title: Type
          default: PSQLVectorDBManager
        database_name:
          type: string
          title: Database Name
        collection_name:
          type: string
          title: Collection Name
        url:
          type: string
          title: Url
        password:
          type: string
          title: Password
        db_user:
          type: string
          title: Db User
        port:
          type: string
          title: Port
        name:
          type: string
          title: Name
        index_info:
          anyOf:
          - $ref: '#/components/schemas/PSQLIndexInfo'
          - type: 'null'
        filename_key:
          type: string
          title: Filename Key
          default: filename
        text_key:
          type: string
          title: Text Key
          default: text
      type: object
      required:
      - database_name
      - collection_name
      - url
      - password
      - db_user
      - port
      - name
      title: PSQLConnectorConfig
    PSQLIndexInfo:
      properties:
        found_indexes:
          items:
            type: string
          type: array
          title: Found Indexes
        total_indexes_found:
          type: integer
          title: Total Indexes Found
      type: object
      required:
      - found_indexes
      - total_indexes_found
      title: PSQLIndexInfo
    PostgresDestinationConfig:
      properties:
        type:
          type: string
          const: PostgresNodeDestinationManager
          title: Type
          default: PostgresNodeDestinationManager
        name:
          type: string
          title: Name
        url:
          type: string
          title: Url
        database_name:
          type: string
          title: Database Name
        collection_name:
          type: string
          title: Collection Name
        db_user:
          type: string
          title: Db User
        port:
          type: integer
          title: Port
        password:
          type: string
          title: Password
        id_key:
          type: string
          title: Id Key
          default: id
        tags_key:
          type: string
          title: Tags Key
          default: tags
        filename_key:
          type: string
          title: Filename Key
          default: filename
        text_key:
          type: string
          title: Text Key
          default: text
        dimension_threshold:
          anyOf:
          - type: integer
          - type: 'null'
          title: Dimension Threshold
          default: 384
        page_num_key:
          anyOf:
          - type: string
          - type: 'null'
          title: Page Num Key
        create_new_collection:
          type: boolean
          title: Create New Collection
          default: false
      type: object
      required:
      - name
      - url
      - database_name
      - collection_name
      - db_user
      - port
      - password
      title: PostgresDestinationConfig
    QdrantConnectorConfig:
      properties:
        type:
          type: string
          const: QdrantVectorDBManager
          title: Type
          default: QdrantVectorDBManager
        name:
          type: string
          title: Name
        filename_key:
          type: string
          title: Filename Key
          default: filename
        text_key:
          type: string
          title: Text Key
          default: text
        api_key:
          type: string
          title: Api Key
        collection_name:
          type: string
          title: Collection Name
        url:
          type: string
          title: Url
        index_info:
          anyOf:
          - $ref: '#/components/schemas/QdrantIndexInfo'
          - type: 'null'
      type: object
      required:
      - name
      - api_key
      - collection_name
      - url
      title: QdrantConnectorConfig
    QdrantIndexInfo:
      properties:
        total_indexes_found:
          type: integer
          title: Total Indexes Found
      type: object
      required:
      - total_indexes_found
      title: QdrantIndexInfo
    RegexPattern:
      properties:
        pattern:
          type: string
          title: Pattern
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        output_value:
          anyOf:
          - type: string
          - type: 'null'
          title: Output Value
        confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Confidence
        validator:
          anyOf:
          - type: string
          - type: 'null'
          title: Validator
        active:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Active
          default: true
      type: object
      required:
      - pattern
      title: RegexPattern
      description: Model for regex pattern configuration in tags.
    RuleBasedRule-Input:
      properties:
        tag_value:
          anyOf:
          - type: integer
          - type: number
          - type: string
          - type: 'null'
          title: Tag Value
        condition:
          anyOf:
          - $ref: '#/components/schemas/Condition-Input'
          - type: 'null'
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Confidence
      type: object
      title: RuleBasedRule
      description: Model for rule-based tag configuration.
    RuleBasedRule-Output:
      properties:
        tag_value:
          anyOf:
          - type: integer
          - type: number
          - type: string
          - type: 'null'
          title: Tag Value
        condition:
          anyOf:
          - $ref: '#/components/schemas/Condition-Output'
          - type: 'null'
        description:
          anyOf:
          - type: string
          - type: 'null'
          title: Description
        confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Confidence
      type: object
      title: RuleBasedRule
      description: Model for rule-based tag configuration.
    S3ConnectorConfig:
      properties:
        type:
          type: string
          const: S3DataSourceManager
          title: Type
          default: S3DataSourceManager
        bucket_name:
          type: string
          title: Bucket Name
        aws_access_key_id:
          type: string
          title: Aws Access Key Id
        aws_secret_access_key:
          type: string
          title: Aws Secret Access Key
        name:
          type: string
          title: Name
      type: object
      required:
      - bucket_name
      - aws_access_key_id
      - aws_secret_access_key
      - name
      title: S3ConnectorConfig
    SharepointConnectorConfig:
      properties:
        type:
          type: string
          const: SharepointDataSourceManager
          title: Type
          default: SharepointDataSourceManager
        name:
          type: string
          title: Name
        client_id:
          type: string
          title: Client Id
        client_secret:
          type: string
          title: Client Secret
        tenant_id:
          type: string
          title: Tenant Id
        sharepoint_site_name:
          type: string
          title: Sharepoint Site Name
      type: object
      required:
      - name
      - client_id
      - client_secret
      - tenant_id
      - sharepoint_site_name
      title: SharepointConnectorConfig
    SharepointDestinationConfig:
      properties:
        type:
          type: string
          const: SharepointNodeDestinationManager
          title: Type
          default: SharepointNodeDestinationManager
        name:
          type: string
          title: Name
        client_id:
          type: string
          title: Client Id
        client_secret:
          type: string
          title: Client Secret
        tenant_id:
          type: string
          title: Tenant Id
        sharepoint_site_name:
          type: string
          title: Sharepoint Site Name
        documents_library_folder_name:
          type: string
          title: Documents Library Folder Name
      type: object
      required:
      - name
      - client_id
      - client_secret
      - tenant_id
      - sharepoint_site_name
      - documents_library_folder_name
      title: SharepointDestinationConfig
    SuggestRegexRequest:
      properties:
        description:
          type: string
          title: Description
        examples:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Examples
          default: []
      type: object
      required:
      - description
      title: SuggestRegexRequest
    SuggestRegexResponse:
      properties:
        regex:
          type: string
          title: Regex
        explanation:
          anyOf:
          - type: string
          - type: 'null'
          title: Explanation
      type: object
      required:
      - regex
      title: SuggestRegexResponse
    Tag-Input:
      properties:
        tag_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Tag Id
        username:
          anyOf:
          - type: string
          - type: 'null'
          title: Username
        name:
          type: string
          title: Name
        description:
          type: string
          title: Description
        output_type:
          anyOf:
          - $ref: '#/components/schemas/TagOutputType'
          - type: 'null'
          default: string
        available_values:
          anyOf:
          - items:
              anyOf:
              - type: string
              - type: number
              - type: integer
            type: array
          - type: 'null'
          title: Available Values
          default: []
        examples:
          anyOf:
          - items:
              anyOf:
              - type: string
              - additionalProperties: true
                type: object
            type: array
          - type: 'null'
          title: Examples
          default: []
        created_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Created At
        updated_at:
          anyOf:
          - type: string
            format: date-time
          - type: 'null'
          title: Updated At
        maxValues:
          anyOf:
          - type: integer
          - type: string
          - items: {}
            type: array
          - type: 'null'
          title: Maxvalues
        neg_examples:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Neg Examples
          default: []
        retry_feedback:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Retry Feedback
        date_format:
          anyOf:
          - type: string
          - type: 'null'
          title: Date Format
        strategy:
          anyOf:
          - type: string
          - type: 'null'
          title: Strategy
          default: LLM
        scope:
          anyOf:
          - type: string
          - type: 'null'
          title: Scope
          default: ALL_PAGES
        truncated_available_values:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Truncated Available Values
          default: false
        enhance_file_metadata:
          anyOf:
          - type: boolean
          - type: 'null'
          title: Enhance File Metadata
          default: true
        regex:
          anyOf:
          - type: string
          - type: 'null'
          title: Regex
        patterns:
          anyOf:
          - items:
              $ref: '#/components/schemas/RegexPattern'
            type: array
          - type: 'null'
          title: Patterns
          default: []
        visual_rules:
          anyOf:
          - items:
              $ref: '#/components/schemas/RuleBasedRule-Input'
            type: array
          - type: 'null'
          title: Visual Rules
          default: []
        group:
          anyOf:
          - type: string
          - type: 'null'
          title: Group
        min_confidence:
          anyOf:
          - type: number
          - type: 'null'
          title: Min Confidence
      type: object
      required:
      - name
      - description
      title: Tag
    TagMetadata:
      properties:
        chunk_level:
          anyOf:
          - additionalProperties:
              anyOf:
              - $ref: '#/components/schemas/Metadata'
              - type: 'null'
            type: object
          - type: 'null'
          title: Chunk Level
        file_level:
          anyOf:
          - $ref: '#/components/schemas/Metadata'
          - type: 'null'
      type: object
      title: TagMetadata
    TagOutputType:
      type: string
      enum:
      - string
      - binary
      - number
      - date
      title: TagOutputType
    TagResponse:
      properties:
        tag_name:
          type: string
          title: Tag Name
      type: object
      required:
      - tag_name
      title: TagResponse
    TaskStatusRequest:
      properties:
        job_id:
          type: string
          title: Job Id
      type: object
      required:
      - job_id
      title: TaskStatusRequest
    TaskStatusResponse:
      properties:
        percent_complete:
          type: number
          title: Percent Complete
        status:
          $ref: '#/components/schemas/JobStatus'
      type: object
      required:
      - percent_complete
      - status
      title: TaskStatusResponse
    TaxonomyOperationResponse:
      properties:
        taxonomy_name:
          type: string
          title: Taxonomy Name
      type: object
      required:
      - taxonomy_name
      title: TaxonomyOperationResponse
    UpdateVDBConnectorRequest:
      properties:
        connector_name:
          type: string
          title: Connector Name
        connector_body:
          anyOf:
          - $ref: '#/components/schemas/PSQLConnectorConfig'
          - $ref: '#/components/schemas/QdrantConnectorConfig'
          - $ref: '#/components/schemas/S3ConnectorConfig'
          - $ref: '#/components/schemas/SharepointConnectorConfig'
          title: Connector Body
      type: object
      required:
      - connector_name
      - connector_body
      title: UpdateVDBConnectorRequest
    UpsertMetadataRequest:
      properties:
        data_connector_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Data Connector Name
        dataslice_id:
          anyOf:
          - type: string
          - type: 'null'
          title: Dataslice Id
        metadata:
          anyOf:
          - additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/TagMetadata'
              type: object
            type: object
          - additionalProperties:
              additionalProperties:
                $ref: '#/components/schemas/Metadata'
              type: object
            type: object
          title: Metadata
      type: object
      required:
      - metadata
      title: UpsertMetadataRequest
    UpsertMetadataResponse:
      properties:
        success:
          type: boolean
          title: Success
      type: object
      required:
      - success
      title: UpsertMetadataResponse
    UpsertTagRequest:
      properties:
        tag_data:
          $ref: '#/components/schemas/DeasyInputTag-Input'
      type: object
      required:
      - tag_data
      title: UpsertTagRequest
    UpsertTagResponse:
      properties:
        tag_name:
          type: string
          title: Tag Name
        tag:
          $ref: '#/components/schemas/DeasyTag'
        available_values_added:
          items:
            type: string
          type: array
          title: Available Values Added
      type: object
      required:
      - tag_name
      - tag
      - available_values_added
      title: UpsertTagResponse
    UpsertTaxonomyRequest:
      properties:
        taxonomy_name:
          type: string
          title: Taxonomy Name
        new_taxonomy_name:
          anyOf:
          - type: string
          - type: 'null'
          title: New Taxonomy Name
        taxonomy_description:
          anyOf:
          - type: string
          - type: 'null'
          title: Taxonomy Description
        taxonomy_data:
          anyOf:
          - additionalProperties: true
            type: object
          - type: 'null'
          title: Taxonomy Data
      type: object
      required:
      - taxonomy_name
      title: UpsertTaxonomyRequest
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
      - loc
      - msg
      - type
      title: ValidationError
    app__models__models_metadata__DeleteMetadataRequest:
      properties:
        data_connector_name:
          type: string
          title: Data Connector Name
        file_names:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: File Names
        tags:
          anyOf:
          - items:
              type: string
            type: array
          - type: 'null'
          title: Tags
        conditions:
          anyOf:
          - $ref: '#/components/schemas/Condition-Input'
          - type: 'null'
      type: object
      required:
      - data_connector_name
      title: DeleteMetadataRequest
    app__models__models_metadata__DeleteMetadataResponse:
      properties:
        chunk_deleted_count:
          type: integer
          title: Chunk Deleted Count
        file_deleted_count:
          type: integer
          title: File Deleted Count
      type: object
      required:
      - chunk_deleted_count
      - file_deleted_count
      title: DeleteMetadataResponse
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
    BasicAuth:
      type: http
      scheme: basic
